# AUTHOR: Luis Amilcar Tavares<luis.tavares@checkmarx.com>

version: '3.7'

x-superset-image: &superset-image apache/superset:1.5.1
x-superset-depends-on: &superset-depends-on
  - db
  - redis
x-superset-volumes: &superset-volumes
  - ./superset/docker:/app/docker
  - superset_home:/app/superset_home

services:
  redis:
    image: redis:latest
    container_name: superset_cache
    restart: unless-stopped
    volumes:
      - redis:/data

  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: redis_commander
    environment:
      - REDIS_HOSTS=local:redis:6379
      - HTTP_USER=root
      - HTTP_PASSWORD=qwerty
    ports:
      - 8081:8081
    depends_on:
      - redis

  db:
    env_file: superset/docker/.env-superset
    image: timescale/timescaledb:latest-pg14 #postgres:10
    container_name: superset_db
    restart: unless-stopped
    command: [ "postgres", "-c", "config_file=/etc/postgresql/postgresql.conf", "-c", "hba_file=/etc/postgresql/pg_hba.conf" ]
    ports:
      - "5432:5432"
    volumes:
      - db_home:/var/lib/postgresql/data
      - ./superset/docker/postgresqlconfig/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./superset/docker/postgresqlconfig/pg_hba.conf:/etc/postgresql/pg_hba.conf

  superset:
    env_file: superset/docker/.env-superset
    image: *superset-image
    container_name: superset_app
    command: [ "/app/docker/docker-bootstrap.sh", "app-gunicorn" ]
    user: "root"
    restart: unless-stopped
    ports:
      - 8088:8088
    depends_on: *superset-depends-on
    volumes: *superset-volumes

  superset-init:
    image: *superset-image
    container_name: superset_init
    command: [ "/app/docker/docker-init.sh" ]
    env_file: superset/docker/.env-superset
    depends_on: *superset-depends-on
    user: "root"
    volumes: *superset-volumes

  superset-worker:
    image: *superset-image
    container_name: superset_worker
    command: [ "/app/docker/docker-bootstrap.sh", "worker" ]
    env_file: superset/docker/.env-superset
    restart: unless-stopped
    depends_on: *superset-depends-on
    user: "root"
    volumes: *superset-volumes

  superset-worker-beat:
    image: *superset-image
    container_name: superset_worker_beat
    command: [ "/app/docker/docker-bootstrap.sh", "beat" ]
    env_file: superset/docker/.env-superset
    restart: unless-stopped
    depends_on: *superset-depends-on
    user: "root"
    volumes: *superset-volumes

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    env_file: superset/docker/.env-superset
    ports:
      - '5050:80'
    restart: always
    depends_on: *superset-depends-on
    volumes:
      - pgadmin:/root/.pgadmin

  prometheus:
    image: prom/prometheus:latest #v2.17.1
    container_name: prometheus
    volumes:
      - ./prometheus-grafana/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    expose:
      - 9090
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"

  alertmanager:
    image: prom/alertmanager:latest #v0.20.0
    container_name: alertmanager
    volumes:
      - ./prometheus-grafana/alertmanager:/etc/alertmanager
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
    restart: unless-stopped
    expose:
      - 9093
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"

  nodeexporter:
    image: prom/node-exporter:latest #v0.18.1
    container_name: nodeexporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped
    expose:
      - 9100
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"

  cadvisor:
    image: gcr.io/google-containers/cadvisor:latest #v0.34.0
    container_name: cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      #- /cgroup:/cgroup:ro #doesn't work on MacOS only for Linux
    restart: unless-stopped
    expose:
      - 8080
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"

  grafana:
    image: grafana/grafana:latest #6.7.2
    container_name: grafana
    volumes:
      - grafana_data:/var/lib/grafana
      - ./prometheus-grafana/grafana/provisioning:/etc/grafana/provisioning
    env_file: prometheus-grafana/.env-prometheus
    restart: unless-stopped
    expose:
      - 3000
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"

  pushgateway:
    image: prom/pushgateway:latest #v1.2.0
    container_name: pushgateway
    restart: unless-stopped
    expose:
      - 9091
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"

  caddy:
    image: stefanprodan/caddy:latest
    container_name: caddy
    ports:
      - "3000:3000"
      - "9090:9090"
      - "9093:9093"
      - "9091:9091"
    volumes:
      - ./prometheus-grafana/caddy:/etc/caddy
    env_file: prometheus-grafana/.env-prometheus
    restart: unless-stopped
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"

  app:
    build: app/
    container_name: app
    ports:
      - 8090:8090

volumes:
  superset_home:
    external: false
  db_home:
    external: false
  redis:
    external: false
  pgadmin:
    external: false
  prometheus_data: {}
  grafana_data: {}

networks:
  monitor-net:
    driver: bridge